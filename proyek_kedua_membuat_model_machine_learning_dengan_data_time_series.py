# -*- coding: utf-8 -*-
"""Proyek Kedua : Membuat Model Machine Learning dengan Data Time Series.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QeeNehoIOEz8qg8B89SYJ3QL3f-msknk
"""

import numpy as np
import pandas as pd
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
import tensorflow as tf

data_train = pd.read_csv('data_gold_price.csv')
data_train.head()

data_train.isnull().sum()

dates = data_train['Date'].values
values = data_train['Value'].values

plt.figure(figsize=(15,5))
plt.plot(dates, values)
plt.title('Value average',
          fontsize=20);

#def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
  #series = tf.expand_dims(series, axis=-1)
  #ds = tf.data.Dataset.from_tensor_slices(series)
  #ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
  #ds = ds.flat_map(lambda w: w.batch(window_size + 1))
  #ds = ds.shuffle(shuffle_buffer)
  #ds = ds.map(lambda w: (w[:-1], w[-1:]))
  #return ds.batch(batch_size).prefetch(1)

#from sklearn.model_selection import train_test_split
#dates_latih, dates_test, values_latih, values_test = train_test_split(dates, values, test_size=0.2)

data_num = len(data_train['Value'])
val_split = 0.2

val_num = int(val_split * data_num)
train_num = data_num - val_num

val_num

train_num

val = data_train[train_num:]
train = data_train[:train_num]

from sklearn.preprocessing import MinMaxScaler
scaler_data = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler_data.fit_transform(data_train['Value'].values.reshape(-1,1))

threshold_mae = (scaled_data.max() - scaled_data.min()) * 1/10
threshold_mae

scaler_train = MinMaxScaler(feature_range=(0, 1))
scaled_train = scaler_train.fit_transform(train['Value'].values.reshape(-1,1))

scaler_val = MinMaxScaler(feature_range=(0, 1))
scaled_val = scaler_val.fit_transform(val['Value'].values.reshape(-1,1))

def create_dataset(dataset, look_back=30):
    data_X, data_Y = [], []
    for i in range(len(dataset) - look_back):
        a = dataset[i:(i + look_back), 0]
        data_X.append(a)
        data_Y.append(dataset[i + look_back, 0])
    return np.array(data_X), np.array(data_Y)

X_val, Y_val = create_dataset(scaled_val)
X_train, Y_train = create_dataset(scaled_train)

X_val = np.reshape(X_val, (X_val.shape[0], 1, X_val.shape[1]))
X_train = np.reshape(X_train, (X_train.shape[0], 1, X_train.shape[1]))

#train_set = windowed_dataset(values, window_size=60, batch_size=100, shuffle_buffer=1000)
model = tf.keras.models.Sequential([
    tf.keras.layers.LSTM(1024, return_sequences=True),
    tf.keras.layers.LSTM(512),
    tf.keras.layers.Dense(128, activation="relu"),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Dense(64, activation="relu"),
    tf.keras.layers.Dropout(0.25),
    tf.keras.layers.Dense(1),
])

optimizer = tf.keras.optimizers.Adam(lr=0.001)
model.compile(loss='mean_absolute_error',
              optimizer=optimizer,
              metrics=["mae"])
history = model.fit(X_train, Y_train,
                    epochs=100,
                    validation_data=[X_val, Y_val])